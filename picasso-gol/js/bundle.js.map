{"version":3,"sources":["webpack/bootstrap c753fe650bc14ea54c27","./js/main.js","./js/game.js","./js/grid.js","./js/viewport.js","./js/cell.js","./js/structures/structure.js","./js/structures/structures.js","./js/structures/single_cell.js","./js/structures/eraser.js","./js/listeners.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACRD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAAyB,sBAAsB;AAC/C;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AC3GA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL,mBAAkB,mBAAmB;AACrC;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH,4BAA2B,uBAAuB;AAClD,wBAAuB,qBAAqB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAkB,QAAQ;AAC1B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAmD,oBAAoB,EAAE;;;AAGzE;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,UAAU;;AAEjC;;AAEA;AACA,IAAG;AACH;;AAEA;;;;;;;ACrIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qDAAoD,gBAAgB;;AAEpE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,iBAAiB;AAClC,oBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB,4BAA4B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;ACrDA;AACA;AACA;AACA;;AAEA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;;AAGH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,yC;AACA;AACA,QAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;AACH;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c753fe650bc14ea54c27\n **/","const Game = require('./game.js');\nconst bindListeners = require('./listeners');\n\n$(() => {\n  const rootEl = document.getElementById('g-o-l');\n  const ctx = rootEl.getContext('2d');\n  window.game = new Game(ctx);\n  bindListeners(window.game);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 1\n ** module chunks = 0\n **/","const Grid = require('./grid'),\n    Viewport = require('./viewport');\n    Structure = require('./structures/structure'),\n    Structures = require('./structures/structures');\n\nconst Game = function(ctx) {\n  this.ctx = ctx;\n  this.grid = new Grid();\n  this.viewport = new Viewport(this.grid, this.ctx);\n\n  this.playing = false;\n  this.speed = 1000;\n\n  this.tabFocus = true;\n\n  this.cycle();\n};\n\nGame.prototype.cycle = function () {\n  let cycleStart = new Date().getTime();\n\n  this.render(cycleStart);\n};\n\nGame.prototype.render = function (cycleStart) {\n  let currentTime = new Date().getTime() - cycleStart;\n  let percentage = currentTime / this.speed;\n\n  if (percentage >= 1) {\n    percentage %= 1;\n    cycleStart += this.speed;\n\n    if (!this.tabFocus) { this.playing = false; }\n    this.playing ? this.grid.toggleCells() : this.grid.finishCycle();\n\n    this.viewport.setCellStates(this.grid.states);\n  }\n\n  this.viewport.render(percentage);\n\n  requestAnimationFrame(this.render.bind(this, cycleStart));\n};\n\nGame.prototype.togglePlayState = function () {\n  this.playing = !this.playing;\n};\n\nGame.prototype.toggleGridlines = function () {\n  this.viewport.toggleGridlines();\n};\n\nGame.prototype.setZoomLevel = function (newZoom) {\n  this.viewport.setZoomLevel(newZoom);\n};\n\nGame.prototype.setSpeed = function (newSpeed) {\n  this.speed = newSpeed;\n};\n\nGame.prototype.toggleTabFocus = function () {\n  this.tabFocus = this.tabFocus ? false : true;\n};\n\nGame.prototype.highlightCells = function (mousePos) {\n  let data = {\n    mousePos: mousePos,\n    width: this.selectedStructure.width,\n    height: this.selectedStructure.height\n  };\n\n  this.viewport.setHighlightData(data);\n};\n\nGame.prototype.clearHighlightData = function () {\n  this.viewport.setHighlightData(null);\n};\n\nGame.prototype.addStructure = function (structure, startPos) {\n  structure.awaken(this.grid, startPos);\n\n\n  let posKeys = structure.targetCells(startPos).map(function(pos) {\n    return pos.join(',');\n  });\n\n  this.viewport.setCellStates(this.grid.states);\n};\n\nGame.prototype.addSelectedStructure = function (mousePos) {\n  let pos = this.viewport.calculateGridPos(mousePos);\n\n  this.addStructure(this.selectedStructure, pos);\n};\n\nGame.prototype.setSelectedStructure = function (structure) {\n  this.selectedStructure = structure;\n};\n\nGame.prototype.setOffsets = function (startPos, endPos) {\n  this.viewport.setOffsets(startPos, endPos);\n};\n\nGame.prototype.clearGrid = function () {\n  this.grid.clear();\n  this.viewport.setCellStates(this.grid.states);\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 2\n ** module chunks = 0\n **/","const Grid = function() {\n  this.neighborCounts = {};\n  this.livingCells = new Set;\n  this.states = { retained: new Set, awakening: new Set, dying: new Set };\n};\n\nGrid.NEIGHBOR_DELTAS = [\n  [-1, -1],\n  [-1,  0],\n  [-1,  1],\n  [ 0, -1],\n  [ 0,  1],\n  [ 1, -1],\n  [ 1,  0],\n  [ 1,  1]\n];\n\nGrid.prototype.toggleCells = function (ctx) {\n  let self = this;\n\n  this.livingCells.forEach(function(posKey){\n    let pos = posKey.split(','),\n        row = parseInt(pos[0]),\n        col = parseInt(pos[1]);\n\n    self.incrementNeighbors(row, col);\n  });\n\n  let retained = new Set,\n      awakening = new Set,\n      dying = new Set,\n      newLiveSet = new Set;\n\n  Object.keys(this.neighborCounts).forEach(function(posKey){\n    let neighborCount = self.neighborCounts[posKey],\n        alive = self.livingCells.has(posKey);\n\n    if (neighborCount === 2 && alive) {\n      newLiveSet.add(posKey);\n      retained.add(posKey);\n    } else if (neighborCount === 3) {\n      newLiveSet.add(posKey);\n      alive ? retained.add(posKey) : awakening.add(posKey);\n    } else {\n      if (alive) { dying.add(posKey); }\n    }\n  });\n\n  this.livingCells = newLiveSet;\n  this.neighborCounts = {};\n\n  this.states = {\n    retained: retained,\n    awakening: awakening,\n    dying: dying\n  };\n};\n\nGrid.prototype.finishCycle = function () {\n  this.states = {\n    retained: this.livingCells,\n    awakening: new Set,\n    dying: new Set\n  };\n};\n\nGrid.prototype.incrementNeighbors = function (row, col) {\n  Grid.NEIGHBOR_DELTAS.forEach(function(delta) {\n    let x = delta[0] + row,\n        y = delta[1] + col,\n        posKey = [x,y].join(',');\n\n    this.neighborCounts[posKey] = this.neighborCounts[posKey] || 0;\n    this.neighborCounts[posKey] += 1;\n  }.bind(this));\n\n  let thisPosKey = [row, col].join(',');\n\n  this.neighborCounts[thisPosKey] = this.neighborCounts[thisPosKey] || 0;\n};\n\nGrid.prototype.awakenCells = function (cells) {\n  cells.forEach(function(cellPos) {\n    let posKey = cellPos.join(',');\n    this.livingCells.add(posKey);\n    this.states.retained.add(posKey);\n    this.states.dying.delete(posKey);\n  }.bind(this));\n};\n\nGrid.prototype.killCells = function (cells) {\n  cells.forEach(function(cellPos) {\n    let posKey = cellPos.join(',');\n    this.livingCells.delete(posKey);\n    this.states.retained.delete(posKey);\n    this.states.awakening.delete(posKey);\n  }.bind(this));\n};\n\nGrid.prototype.alive = function (pos) {\n  return this.livingCells.has(pos.join(','));\n};\n\nGrid.prototype.clear = function () {\n  this.livingCells = new Set;\n  this.states = {\n    retained: new Set,\n    awakening: new Set,\n    dying: new Set\n  };\n};\n\nmodule.exports = Grid;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/grid.js\n ** module id = 3\n ** module chunks = 0\n **/","let Cell = require('./cell');\n\nconst Viewport = function(grid, ctx) {\n  this.grid = grid;\n  this.ctx = ctx;\n  this.gridlines = true;\n  this.zoomLevel = 4;\n  this.offsets = [0, 0];\n  this.cellOffsets = [0, 0];\n  this.cellFractionOffsets = [0, 0];\n\n  this.cells = [];\n};\n\nViewport.prototype.render = function (percentage) {\n  this.recontextualize();\n  this.clear();\n\n  this.cells.forEach(function(cell) {\n    cell.renderOrb(percentage, this.cellOffsets)\n  }.bind(this));\n\n  if (this.highlightData) { this.highlightCells(); }\n  if (this.gridlines) { this.addGridlines(); }\n};\n\nViewport.prototype.recontextualize = function () {\n  this.ctx.setTransform(\n    this.zoomLevel,\n    0,\n    0,\n    this.zoomLevel,\n    this.ctx.canvas.width / 2 + this.cellFractionOffsets[0] * 5 * this.zoomLevel,\n    this.ctx.canvas.height / 2 + this.cellFractionOffsets[1] * 5 * this.zoomLevel\n  );\n};\n\nViewport.prototype.clear = function () {\n  let width = this.ctx.canvas.width,\n      height = this.ctx.canvas.height;\n\n  this.ctx.fillStyle = 'black';\n  this.ctx.fillRect(width * -1, height * -1, width * 2, height * 2);\n};\n\nViewport.prototype.addGridlines = function () {\n  this.ctx.beginPath();\n  for(let i = -80; i < 80; i++) {\n    this.ctx.moveTo(this.ctx.canvas.width / -2, i * 5);\n    this.ctx.lineTo(this.ctx.canvas.width / 2, i * 5);\n\n    this.ctx.moveTo(i * 5, this.ctx.canvas.height / -2);\n    this.ctx.lineTo(i * 5, this.ctx.canvas.height / 2);\n  }\n\n  this.ctx.strokeStyle = \"gray\";\n  this.ctx.lineWidth = 0.125;\n  this.ctx.stroke();\n};\n\nViewport.prototype.highlightCells = function () {\n  let pos = this.calculateGridPos(this.highlightData.mousePos),\n      row = pos[0],\n      col = pos[1];\n\n  this.ctx.fillStyle = 'rgba(255,255,0,0.2)';\n  this.ctx.fillRect(\n    (row + this.cellOffsets[0]) * 5,\n    (col + this.cellOffsets[1]) * 5,\n    this.highlightData.width * 5,\n    this.highlightData.height * 5\n  );\n};\n\nViewport.prototype.calculateGridPos = function (mousePos) {\n  let offsets = [\n    this.ctx.canvas.width / 2 + this.cellFractionOffsets[0] * 5 * this.zoomLevel,\n    this.ctx.canvas.height / 2 + this.cellFractionOffsets[1] * 5 * this.zoomLevel\n  ];\n\n  return mousePos.map(function(dim, idx) {\n    let offset = dim - offsets[idx];\n    return Math.floor(offset / 5 / this.zoomLevel) - this.cellOffsets[idx];\n  }.bind(this));\n};\n\nViewport.prototype.toggleGridlines = function () {\n  this.gridlines = this.gridlines ? false : true;\n};\n\nViewport.prototype.setCellStates = function (states) {\n  this.cells = [];\n  let self = this;\n\n  Object.keys(states).forEach(function(state) {\n    states[state].forEach(function(posKey) {\n      let pos = posKey.split(',').map(function(i) { return parseInt(i); });\n\n\n      cell = new Cell(...pos, state, self.ctx);\n      self.cells.push(cell);\n    });\n  });\n};\n\nViewport.prototype.setHighlightData = function (data) {\n  this.highlightData = data;\n};\n\nViewport.prototype.setZoomLevel = function (level) {\n  this.zoomLevel = level;\n};\n\nViewport.prototype.setOffsets = function (startPos, endPos) {\n  let xOffset = (endPos[0] - startPos[0]) / 5 / this.zoomLevel,\n      yOffset = (endPos[1] - startPos[1]) / 5 / this.zoomLevel,\n      offsets = [this.offsets[0] + xOffset, this.offsets[1] + yOffset];\n\n  this.offsets = offsets;\n  this.calcCellOffsets();\n};\n\nViewport.prototype.calcCellOffsets = function () {\n  this.cellFractionOffsets = this.offsets.map(offset => offset % 1 );\n  this.cellOffsets = this.offsets.map(offset => {\n    if (offset === 0) { return 0; }\n\n    negationMod = offset / Math.abs(offset);\n\n    return Math.floor(offset * negationMod) * negationMod;\n  });\n};\n\nmodule.exports = Viewport;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/viewport.js\n ** module id = 4\n ** module chunks = 0\n **/","const Cell = function(row, col, state, ctx) {\n  this.size = 5;\n\n  this.row = row;\n  this.col = col;\n\n  this.state = state;\n  this.ctx = ctx;\n};\n\nCell.prototype.renderOrb = function (percentage, offsets) {\n  if (percentage > 1 || this.state === \"retained\") { percentage = 1; }\n\n  let transitionModifier = this.state === \"dying\" ?\n    1 - percentage :\n    percentage;\n\n  let displayRadius = this.size / 2 * transitionModifier;\n  let alpha = transitionModifier;\n\n  let radius = this.size / 2;\n  let xPos = (this.row + offsets[0]) * this.size + radius;\n  let yPos = (this.col + offsets[1]) * this.size + radius;\n\n  let gradient = this.ctx.createRadialGradient(\n    xPos,\n    yPos,\n    displayRadius,\n    xPos,\n    yPos,\n    0\n  );\n  gradient.addColorStop(0, \"black\");\n  gradient.addColorStop(1, \"rgba(8, 146, 208, \" + alpha + \")\");\n\n  this.ctx.beginPath();\n  this.ctx.arc(xPos, yPos, radius, 0, 2*Math.PI);\n  this.ctx.fillStyle = gradient;\n  this.ctx.fill();\n};\n\nmodule.exports = Cell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/cell.js\n ** module id = 5\n ** module chunks = 0\n **/","let Structure = function(options, rotationCount) {\n  this.height = options.height;\n  this.width = options.width;\n  this.liveCellDeltas = options.liveCellDeltas;\n\n  this.rotationCount = rotationCount || 0;\n  this.rotate();\n};\n\nStructure.prototype.awaken = function (grid, startPos) {\n  this.clearArea(grid, startPos);\n\n  let positions = this.liveCellDeltas.map(function(delta){\n    return [startPos[0] + delta[0], startPos[1] + delta[1]];\n  });\n\n  grid.awakenCells(positions);\n};\n\nStructure.prototype.clearArea = function (grid, startPos) {\n  grid.killCells(this.targetCells(startPos));\n};\n\nStructure.prototype.targetCells = function (startPos) {\n  let targetCells = [];\n\n  for (let y = 0; y < this.height; y++) {\n    for (let x = 0; x < this.width; x++) {\n      targetCells.push([startPos[0] + x, startPos[1] + y]);\n    }\n  }\n\n  return targetCells;\n};\n\nStructure.prototype.rotate = function () {\n  for (let i = 0; i < this.rotationCount % 4; i++) {\n    this.rotateNinetyDegrees();\n  }\n};\n\nStructure.prototype.rotateNinetyDegrees = function () {\n  let temp = this.height;\n  this.height = this.width;\n  this.width = temp;\n\n  let offset = this.height - 1;\n\n  this.liveCellDeltas = this.liveCellDeltas.map(function(delta){\n    return [delta[1], (delta[0] * -1) + offset];\n  });\n};\n\nmodule.exports = Structure;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/structures/structure.js\n ** module id = 6\n ** module chunks = 0\n **/","const Structures = {\n  SingleCell: require('./single_cell'),\n  Eraser: require('./eraser'),\n};\n\nmodule.exports = Structures;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/structures/structures.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = {\n  name: \"Single Cell\",\n  height: 1,\n  width : 1,\n  liveCellDeltas : [\n    [0,0],\n  ]\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/structures/single_cell.js\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = {\n  name: \"Eraser\",\n  height: 1,\n  width : 1,\n  liveCellDeltas : []\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/structures/eraser.js\n ** module id = 9\n ** module chunks = 0\n **/","const Structure = require('./structures/structure'),\n    Structures = require('./structures/structures');\n\nconst bindListeners = function(game) {\n  $('#play-button').click(function(event) {\n    game.togglePlayState();\n    setPlayButtonText();\n  });\n\n  function setPlayButtonText() {\n    $('#play-button').text(function(){\n      return game.playing ? \"Pause\" : \"Play\";\n    });\n  }\n\n  $('#gridlines-button').click(game.toggleGridlines.bind(game));\n\n  $('#clear-button').click(game.clearGrid.bind(game));\n\n  $('#speed-slider').slider({\n    min: -100,\n    max: 450,\n    value: 0,\n    slide: function(event, ui) {\n      game.setSpeed(1000 / Math.pow(2, ui.value / 100));\n    }\n  });\n\n  $('#zoom-slider').slider({\n    min: 0,\n    max: 500,\n    value: 200,\n    slide: function(event, ui) {\n      game.setZoomLevel(Math.pow(2, ui.value / 100));\n    }\n  });\n\n  // Canvas Events\n  let panning = false,\n      panStart = null;\n\n  function sendPanData(panEnd) {\n    game.setOffsets(panStart, panEnd);\n  }\n\n  function resetPanData() {\n    $('#g-o-l').removeClass(\"pan-grab\");\n    panStart = null;\n  }\n\n  function calcMousePos(event) {\n    let canvas = event.currentTarget,\n        x = event.pageX - canvas.offsetLeft,\n        y = event.pageY - canvas.offsetTop;\n\n    x = Math.floor(x/20);\n    y = Math.floor(y/20);\n    console.log(x, y);\n    let pos = [x * 19, y * 19];\n\n\n    return pos;\n  }\n\n  $(window).keydown(event => {\n    if (event.key === \"Alt\") {\n      panning = true;\n      game.clearHighlightData();\n      $('#g-o-l').addClass(\"pan-hover\");\n    }\n  });\n\n  $(window).keyup(event => {\n    if (event.key === \"Alt\") {\n      panning = false;\n      $('#g-o-l').removeClass(\"pan-hover pan-grab\");\n    }\n  });\n\n  $('#g-o-l').mousemove(function(event) {\n    let pos = calcMousePos(event);\n\n    if (panning) {\n      if (panStart) {\n        sendPanData(pos);\n        panStart = pos;\n      }\n    } else {\n      game.highlightCells(pos);\n    }\n  });\n\n  $('#g-o-l').mouseleave(function () {\n    game.clearHighlightData();\n    resetPanData();\n  });\n\n\n  $('#g-o-l').mouseup(resetPanData);\n\n  // Structures Panel\n\n  let selectedStructure = Structures.SingleCell;\n  let idx = undefined;\n  window.selectedCell = [];\n\n  $('#g-o-l').mousedown(function(event) {\n    select(Structures.SingleCell, event);\n    let pos = calcMousePos(event);\n     idx = posExist(window.selectedCell, pos);\n\n      if(idx){\n        select(Structures.Eraser, event);\n        delete window.selectedCell[idx]; \n        console.log(window.selectedCell);\n      }else{\n\n      window.selectedCell.push(pos);\n      console.log(window.selectedCell);\n      \n    }\n    if (panning) {\n      panStart = pos;\n      $('#g-o-l').addClass(\"pan-grab\");\n    } else {\n      game.addSelectedStructure(pos);\n    }\n\n  });\n\n  function posExist(posArr, currPos){\n    let idx = undefined;\n    posArr.forEach((pos, i)=>{\n      if(pos[0] === currPos[0] && pos[1] === currPos[1]){\n        idx = i;\n      }\n    });\n    return idx;\n  }\n\n  function select(structure, event) {\n    selectedStructure = structure;\n    game.setSelectedStructure(new Structure(structure));\n\n    $('.sidebar *').removeClass(\"selected\");\n   \n    $(event.currentTarget).addClass(\"selected\");\n  }\n\n  $(()=>{\n    $('#g-o-l').ready(select.bind(null, Structures.SingleCell));\n  });\n};\n\nmodule.exports = bindListeners;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/listeners.js\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}